unit Monolito.Financeiro.Model.Usuarios;

interface

uses
  System.SysUtils, System.Classes, Data.FMTBcd, Datasnap.Provider,
  Datasnap.DBClient, Data.DB, Data.SqlExpr, MonolitoFinanceiro.Model.Conexao,
  FireDAC.Stan.Intf, FireDAC.Stan.Option, FireDAC.Stan.Param,
  FireDAC.Stan.Error, FireDAC.DatS, FireDAC.Phys.Intf, FireDAC.DApt.Intf,
  FireDAC.Stan.Async, FireDAC.DApt, FireDAC.Comp.DataSet, FireDAC.Comp.Client;

type
  TdmUsuarios = class(TDataModule)
    cdsUsuarios: TClientDataSet;
    dspUsuarios: TDataSetProvider;
    sqlUsuarios: TFDQuery;
    cdsUsuariosID: TStringField;
    cdsUsuariosNome: TStringField;
    cdsUsuariosLogin: TStringField;
    cdsUsuariosSenha: TStringField;
    cdsUsuariosStatus: TStringField;
    cdsUsuariosData_Cadastro: TDateField;
  private
    FLoginUsuarioLogado: String;
    FNomeUsuarioLogado: String;
    FIDUsuarioLogado: String;
    FNomeUsuario: String;
    FLoginUsuario: String;
    procedure SetNomeUsuarioLogado(const Value: string);
    procedure SetLoginUsuarioLogado (const Value: String);
    procedure SetIDUsuarioLogado(const Value: String);
    { Private declarations }
  public
    { Public declarations }
    function TemLoginCadastrado (Login : String; ID : String) : Boolean;
    procedure EfetuarLogin(Login: String; Senha: String);

    property NomeUsuario: String read FNomeUsuario write FNomeUsuario;
    property LoginUsuario: String read FLoginUsuario write FLoginUsuario;
    property IDUsuarioLogado: String read FIDUsuarioLogado write FIDUsuarioLogado;
  end;

var
  dmUsuarios: TdmUsuarios;

implementation

{%CLASSGROUP 'Vcl.Controls.TControl'}

{$R *.dfm}

{ TdmUsuarios }

procedure TdmUsuarios.EfetuarLogin(Login, Senha: String);
var
  SQLConsulta : TFDQuery;
begin
  SQLConsulta := TFDQuery.Create(nil);
  try
    SQLConsulta.Connection := dmConexao.SQLConexao;
    SQLConsulta.SQL.Clear;
    SQLConsulta.SQL.Add('SELECT * FROM USUARIOS WHERE LOGIN = :LOGIN AND SENHA = :SENHA');
    SQLConsulta.ParamByName('LOGIN').AsString := Login;
    SQLConsulta.ParamByName('SENHA').AsString := Senha;
    SQLConsulta.Open;

    if SQLConsulta.IsEmpty then
      raise Exception.Create('Usuário e/ou senha inválidos');
    if SQLConsulta.FieldByName('STATUS').AsString <> 'A' then
      raise Exception.Create('Usuário bloqueado, favor entrar em contato com o administrador');

    SetIDUsuarioLogado(SQLConsulta.FieldByName('ID').AsString);
    FNomeUsuarioLogado := SQLConsulta.FieldByName('NOME').asString;
    FLoginUsuarioLogado := SQLConsulta.FieldByName('LOGIN').AsString;

  finally
    SQLConsulta.Close;
    SQLConsulta.Free;
  end;
end;

procedure TdmUsuarios.SetIDUsuarioLogado(const Value: String);
begin
  FIDUsuarioLogado := Value;
end;

procedure TdmUsuarios.SetLoginUsuarioLogado(const Value: String);
begin
  FLoginUsuarioLogado := Value;
end;

procedure TdmUsuarios.SetNomeUsuarioLogado(const Value: string);
begin
  FNomeUsuarioLogado := Value;
end;

function TdmUsuarios.TemLoginCadastrado(Login, ID: String): Boolean;
var
  SQLConsulta : TFDQuery;
begin
  Result := False;
  SQLConsulta := TFDQuery.Create(nil);
  try
    SQLConsulta.Connection := dmConexao.SQLConexao;
    SQLConsulta.SQL.Clear;
    SQLConsulta.SQL.Add('SELECT ID FROM USUARIOS WHERE LOGIN = :LOGIN');
    SQLConsulta.ParamByName('LOGIN').AsString := Login;
    SQLConsulta.Open;
    if not SQLConsulta.IsEmpty then
      Result := SQLConsulta.FieldByName('ID').AsString <> ID;
  finally
    SQLConsulta.Close;
    SQLConsulta.Free;
  end;
end;

end.
