unit MonolitoFinanceiro.View.ContasReceber.Detalhes;

interface

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants, System.Classes, Vcl.Graphics,
  Vcl.Controls, Vcl.Forms, Vcl.Dialogs, Vcl.ExtCtrls, Data.DB, Vcl.Grids,
  Vcl.DBGrids, System.ImageList, Vcl.ImgList, Vcl.StdCtrls;

type
  TfrmContasReceberDetalhes = class(TForm)
    Panel1: TPanel;
    Panel2: TPanel;
    Panel3: TPanel;
    Panel4: TPanel;
    DBGrid1: TDBGrid;
    DataSource1: TDataSource;
    ImageList1: TImageList;
    btnFechar: TButton;
    Panel5: TPanel;
    Panel6: TPanel;
    Panel7: TPanel;
    Panel8: TPanel;
    Label1: TLabel;
    Label2: TLabel;
    Label3: TLabel;
    lblVencimento: TLabel;
    lblNumeroParcela: TLabel;
    lblNumeroDocumento: TLabel;
    Panel9: TPanel;
    Label4: TLabel;
    Label5: TLabel;
    Label6: TLabel;
    Panel10: TPanel;
    lblValorCompra: TLabel;
    lblValorParcela: TLabel;
    lblDescricao: TLabel;
    Panel12: TPanel;
    lblTotalDetalhes: TLabel;
    lblQuantidadeRegistros: TLabel;
    procedure btnFecharClick(Sender: TObject);
  private
    { Private declarations }
  public
    { Public declarations }
    procedure ExibirContasReceberDetalhes(IDContasReceber: string);
  end;

var
  frmContasReceberDetalhes: TfrmContasReceberDetalhes;

implementation

{$R *.dfm}

uses MonolitoFinanceiro.Model.ContasReceber, MonolitoFinanceiro.Entidades.ContaReceber;

procedure TfrmContasReceberDetalhes.btnFecharClick(Sender: TObject);
begin
  ModalResult := mrOk;
end;

procedure TfrmContasReceberDetalhes.ExibirContasReceberDetalhes(
  IDContasReceber: string);
var
  ContasReceber: TModelContaReceber;
begin
  if IDContasReceber.IsEmpty then
    raise Exception.Create('ID do contas a receber inválido');

  ContasReceber := dmContasReceber.GetContaReceber(IDContasReceber);
  try
    if ContasReceber.ID.IsEmpty then
      raise Exception.Create('ID do contas a receber inválido');


  finally
    ContasReceber.Free;
  end;
end;

end.
